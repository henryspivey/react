// let vs const
use let for variable values
use const for constant values

// arrow functions
const printMyName = name => {
  // code
  // don't need () for exactly one arg
}
const noParams = () => {
  // with no params, use must use ()
}

// imports/exports

// person.js
const person = {
  // code
}
export default person
This can be imported with import prs from './person.js' because its exported by default

// utilities.js
export const var1...
export const var 2...
this can be imported with
import {var1} from './utilities.js'
import {var2} from './utilities.js'
to target certain things
or import * as bundled from './utilities.js'


// classes
class Human {
  constructor() {
    this.gender= 'male';
  }
  printGender() {
    console.log(this.gender);
  }
}

class Person extends Human{
  constructor() {
    super();
    this.name = "henry";
  }
  printMyName() {
    console.log(this.name);
  }
}

const p = new Person();
p.printMyName();
p.printGender();


// ES6/BABEL VERSION
class Human {
  gender= 'male';
  printGender = () => {
    console.log(this.gender);
  }
}

class Person extends Human{
  name= "henry";
  gender= "male23"
  printMyName = () => {
    console.log(this.name);
  }
}

const p = new Person();
p.printMyName();
p.printGender();

// rest and spread operators
const nums = [1,3,3,4,5,6,6,7]
const newNums = [...nums, 4] // spread operator
console.log(newNums)

const person = {
  name: 'Max'
};

const newPerson = {
  ...person,
  age: 24
}
console.log(newPerson)


// rest operator
const filter = (...args) => {
  return args.filter(el =>  el === 1)
}
console.log(filter(1,2,4))


// Reference
const person = {
  name: "henry"
};

const secondPerson = {
  ...person
  // must use the spread operator to make an actual copy
};


// Objects and arrays are Reference types

// array functions
const nums = [1,2,3];
const doubleNumArray = numbers.map((num) => {
  return num * 2
}) // returns a completely new array


// Compoonetns
// maintainable
// Reusable
// Configurable
